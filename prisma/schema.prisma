generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(CONSULTANT)
  companyId     String?   @map("company_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts   Account[]
  sessions   Session[]
  company    Company?    @relation(fields: [companyId], references: [id])
  candidates Candidate[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Company {
  id           String   @id @default(cuid())
  name         String
  logoUrl      String?  @map("logo_url")
  primaryColor String?  @map("primary_color")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  users      User[]
  projects   Project[]
  candidates Candidate[]

  @@map("companies")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  companyId   String?  @map("company_id")
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  company    Company?    @relation(fields: [companyId], references: [id])
  candidates Candidate[]

  @@map("projects")
}

model Candidate {
  id                    String    @id @default(cuid())
  email                 String
  name                  String
  companyId             String?   @map("company_id")
  projectId             String?   @map("project_id")
  status                Status    @default(PENDING)
  assessmentSentAt      DateTime? @map("assessment_sent_at")
  assessmentCompletedAt DateTime? @map("assessment_completed_at")
  assessmentLink        String?   @map("assessment_link")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  createdById           String?   @map("created_by_id")

  company     Company?     @relation(fields: [companyId], references: [id])
  project     Project?     @relation(fields: [projectId], references: [id])
  createdBy   User?        @relation(fields: [createdById], references: [id])
  assessments Assessment[]

  @@map("candidates")
}

model Assessment {
  id                     String    @id @default(cuid())
  candidateId            String    @map("candidate_id")
  completedAt            DateTime? @map("completed_at")
  startedAt              DateTime? @map("started_at")
  isValid                Boolean   @default(false) @map("is_valid")
  environmentCheckPassed Boolean   @default(false) @map("environment_check_passed")
  deviceType             String?   @map("device_type")
  browserInfo            Json?     @map("browser_info")
  ipAddress              String?   @map("ip_address")
  consentGiven           Boolean   @default(false) @map("consent_given")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  candidate  Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  discResult DiscResult?

  @@map("assessments")
}

model DiscResult {
  id              String    @id @default(cuid())
  assessmentId    String    @unique @map("assessment_id")
  dScore          Int       @map("d_score")
  iScore          Int       @map("i_score")
  sScore          Int       @map("s_score")
  cScore          Int       @map("c_score")
  patternType     String?   @map("pattern_type")
  reportGenerated Boolean   @default(false) @map("report_generated")
  reportUrl       String?   @map("report_url")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("disc_results")
}

enum Role {
  ADMIN
  CONSULTANT
  CLIENT
}

enum Status {
  PENDING
  COMPLETED
  EXPIRED
  INVALID
}
